#include<iostream>

using namespace std;

class Transaccion{
  int org;
  int dest;
  int monto;
  
  public:
  
  Transaccion(){
      //Inicializar atributos en 0
      org = 0;
      dest = 0;
      monto = 0;
  }
  
  Transaccion(int o, int d, int m){
      //Inicializar atributos con parámetros de entrada
      org = o;
      dest = d;
      monto = m;
  }
  
  int getOrigen(){
      return org;
  }
    
  void setOrigen(int a){
      org = a;
  }
  
  int getDestino(){
      return dest;
  }
    
  void setDestino(int a){
      dest = a;
  }
  
  int getMonto(){
      return monto;
  }
    
  void setMonto(int a){
      monto = a;
  }
    
  Transaccion& operator=(const Transaccion& f) { 
        monto = f.monto;
        return *this; 
    }
  
  
  string to_string() {
        return "("+std::to_string(org) + "," + std::to_string(dest)+ "," + std::to_string(monto)+")";
    }
    
  friend std::ostream& operator<<(std::ostream& os, Transaccion& b) {
        return os << b.to_string();
    }
    
};
//----------------------------
class Nodo{
	
	Transaccion* dato;
	Nodo* dir;
	
public:

	Nodo(){
		dato = NULL;
		dir = NULL;
	}	
	
	~Nodo(){
      delete dato;
  	}
	
	Nodo(Transaccion* c){
		dato = c;
		dir = NULL;
	}
	
	Transaccion* getDato(){
		return dato;
	}
	
	void setDato(Transaccion* c){
		dato = c;
	}
	
	Nodo* getNext(){
		return dir;
	}
	
	void setNext(Nodo* n){
		dir = n;
	}
	
};
//----------------------------
class Lista{
    Nodo* ptr;
    int size;
public:
    //Métodos
    Lista(){
        //Inicializar lista vacía
        ptr = NULL;
        size=0;
    }

    void push_back(Transaccion* c){
        if(size == 0){
            ptr = new Nodo(c);
            size++;
        }else{
            Nodo* t = ptr;
            while(t->getNext() != NULL){
                t = t->getNext();    
            }
            t->setNext(new Nodo(c));
            size++;
        }
    }
    
    Nodo* getNodo(int pos) {
        if(size == 0) {
            throw invalid_argument("La lista no tienen nodos");
        } else if (pos >= size || pos < 0) {
            throw invalid_argument("El nodo no esta en la lista");
        } else {
            Nodo* t = ptr;
            for(int i = 0; i < pos; i++) {
                t = t->getNext();
            }
            return t;
        }
    }
    
    void print(){
		if(size == 0){
            cout<<"La lista está vacía" <<endl;
        }else{
            Nodo* t = ptr;
            do{
                cout<<"("<<t->getDato()->getOrigen()<<","<<t->getDato()->getDestino()<<","<<t->getDato()->getMonto()<<")"<<endl;
                t = t->getNext();
                
            }while(t != NULL);
            cout<<endl;
        }
	} 
    //metodo para sumar montos
    int sumPerorg(int a,int b){
        int c = 0;
         Nodo* t = ptr;
            for(int i = 0; i < size; i++) {
                if(t->getDato()->getOrigen()==a){
                    if(t->getDato()->getDestino()==b){
                        c = c+ t->getDato()->getMonto();
                    }
                }
                t = t->getNext();
            }
        return c;
    }
    
    void cometerFraude(int p){
        for(int i = 0;i<size;i++){
            if(i%p==0){
                Nodo* t = getNodo(i);
                t->getDato()->setMonto(0.75*(t->getDato()->getMonto()));
            }
        }
    }
};

int main()
{
    srand(1234);
    int num_emp = 4; //Número de empresas
    int num_trans = 10; //Número de transacciones
    int error = 3; //Variable para incluir errores en las transacciones
    int monto_max = 100000; //Variable para definir el máximo valor de un monto
    
    //creación de lista de transacciones
    Lista k = Lista(); 
    
    for(int i = 0; i<num_trans; i++){
        int a = rand()%num_emp;
        int b = rand()%num_emp;
        while(a==b){
            b = rand()%num_emp;
        }
        int c = rand()%monto_max;
        k.push_back(new Transaccion(a,b,c));
    }
    k.print();
    
    cout<<endl;
    
    // transacciones originales generación de matriz
    int bank[num_emp][num_emp];
    for(int i=0;i<num_emp;i++){
        for(int j=0;j<num_emp;j++){
            bank[i][j]=k.sumPerorg(i,j);
        }
    }
    //imprimir originales
    for(int i=0; i<num_emp; i++){
       for(int j=0; j<num_emp; j++){
           cout<<bank[i][j]<<"\t";
       }
       cout<<"\n";
   }
   
   cout<<endl;
   
   //fraude
   k.cometerFraude(error);
   k.print();
   
   // transaccion fraudulenta
   int fraude[num_emp][num_emp];
   for(int i=0;i<num_emp;i++){
        for(int j=0;j<num_emp;j++){
            fraude[i][j]=k.sumPerorg(i,j);
        }
    }
    // imprimir el fraude
    for(int i=0; i<num_emp; i++){
       for(int j=0; j<num_emp; j++){
           cout<<fraude[i][j]<<"\t";
       }
       cout<<"\n";
   }
   
   cout<<endl;
   // detectar y calcular fraude
    for(int i=0; i<num_emp; i++){
        for(int j=0; j<num_emp; j++){
            if(bank[i][j] != fraude[i][j])
                cout<<"Diferencia en total de transacciones entre empresas "<<i<<" y "<<j<<" por "<<(fraude[i][j]-bank[i][j])<<endl;
        }
    }
    
    return 0;
}
